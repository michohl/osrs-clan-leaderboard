//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Servers = newServersTable("", "servers", "")

type serversTable struct {
	sqlite.Table

	// Columns
	ID                sqlite.ColumnString
	ServerName        sqlite.ColumnString
	ChannelName       sqlite.ColumnString
	TrackedActivities sqlite.ColumnString
	Schedule          sqlite.ColumnString
	MessageID         sqlite.ColumnString
	ShouldEditMessage sqlite.ColumnBool

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
	DefaultColumns sqlite.ColumnList
}

type ServersTable struct {
	serversTable

	EXCLUDED serversTable
}

// AS creates new ServersTable with assigned alias
func (a ServersTable) AS(alias string) *ServersTable {
	return newServersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ServersTable with assigned schema name
func (a ServersTable) FromSchema(schemaName string) *ServersTable {
	return newServersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ServersTable with assigned table prefix
func (a ServersTable) WithPrefix(prefix string) *ServersTable {
	return newServersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ServersTable with assigned table suffix
func (a ServersTable) WithSuffix(suffix string) *ServersTable {
	return newServersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newServersTable(schemaName, tableName, alias string) *ServersTable {
	return &ServersTable{
		serversTable: newServersTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newServersTableImpl("", "excluded", ""),
	}
}

func newServersTableImpl(schemaName, tableName, alias string) serversTable {
	var (
		IDColumn                = sqlite.StringColumn("id")
		ServerNameColumn        = sqlite.StringColumn("server_name")
		ChannelNameColumn       = sqlite.StringColumn("channel_name")
		TrackedActivitiesColumn = sqlite.StringColumn("tracked_activities")
		ScheduleColumn          = sqlite.StringColumn("schedule")
		MessageIDColumn         = sqlite.StringColumn("message_id")
		ShouldEditMessageColumn = sqlite.BoolColumn("should_edit_message")
		allColumns              = sqlite.ColumnList{IDColumn, ServerNameColumn, ChannelNameColumn, TrackedActivitiesColumn, ScheduleColumn, MessageIDColumn, ShouldEditMessageColumn}
		mutableColumns          = sqlite.ColumnList{ServerNameColumn, ChannelNameColumn, TrackedActivitiesColumn, ScheduleColumn, MessageIDColumn, ShouldEditMessageColumn}
		defaultColumns          = sqlite.ColumnList{ServerNameColumn, ChannelNameColumn, TrackedActivitiesColumn, ScheduleColumn, MessageIDColumn, ShouldEditMessageColumn}
	)

	return serversTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                IDColumn,
		ServerName:        ServerNameColumn,
		ChannelName:       ChannelNameColumn,
		TrackedActivities: TrackedActivitiesColumn,
		Schedule:          ScheduleColumn,
		MessageID:         MessageIDColumn,
		ShouldEditMessage: ShouldEditMessageColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
