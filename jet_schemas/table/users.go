//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Users = newUsersTable("", "users", "")

type usersTable struct {
	sqlite.Table

	// Columns
	OsrsUsernameKey sqlite.ColumnString
	ServerID        sqlite.ColumnString
	OsrsUsername    sqlite.ColumnString
	OsrsAccountType sqlite.ColumnString
	DiscordUsername sqlite.ColumnString
	DiscordUserID   sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
	DefaultColumns sqlite.ColumnList
}

type UsersTable struct {
	usersTable

	EXCLUDED usersTable
}

// AS creates new UsersTable with assigned alias
func (a UsersTable) AS(alias string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UsersTable with assigned schema name
func (a UsersTable) FromSchema(schemaName string) *UsersTable {
	return newUsersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UsersTable with assigned table prefix
func (a UsersTable) WithPrefix(prefix string) *UsersTable {
	return newUsersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UsersTable with assigned table suffix
func (a UsersTable) WithSuffix(suffix string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUsersTable(schemaName, tableName, alias string) *UsersTable {
	return &UsersTable{
		usersTable: newUsersTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newUsersTableImpl("", "excluded", ""),
	}
}

func newUsersTableImpl(schemaName, tableName, alias string) usersTable {
	var (
		OsrsUsernameKeyColumn = sqlite.StringColumn("osrs_username_key")
		ServerIDColumn        = sqlite.StringColumn("server_id")
		OsrsUsernameColumn    = sqlite.StringColumn("osrs_username")
		OsrsAccountTypeColumn = sqlite.StringColumn("osrs_account_type")
		DiscordUsernameColumn = sqlite.StringColumn("discord_username")
		DiscordUserIDColumn   = sqlite.StringColumn("discord_user_id")
		allColumns            = sqlite.ColumnList{OsrsUsernameKeyColumn, ServerIDColumn, OsrsUsernameColumn, OsrsAccountTypeColumn, DiscordUsernameColumn, DiscordUserIDColumn}
		mutableColumns        = sqlite.ColumnList{OsrsUsernameColumn, OsrsAccountTypeColumn, DiscordUsernameColumn, DiscordUserIDColumn}
		defaultColumns        = sqlite.ColumnList{OsrsUsernameKeyColumn, ServerIDColumn, OsrsUsernameColumn, OsrsAccountTypeColumn, DiscordUsernameColumn, DiscordUserIDColumn}
	)

	return usersTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		OsrsUsernameKey: OsrsUsernameKeyColumn,
		ServerID:        ServerIDColumn,
		OsrsUsername:    OsrsUsernameColumn,
		OsrsAccountType: OsrsAccountTypeColumn,
		DiscordUsername: DiscordUsernameColumn,
		DiscordUserID:   DiscordUserIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
